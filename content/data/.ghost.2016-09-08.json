{"meta":{"exported_on":1473300732383,"version":"003"},"data":{"posts":[{"id":2,"uuid":"8bd96107-1c9a-42fb-8dd9-bca31f8fbff7","title":"Android: Using Volley and Loopj with self-signed certificates","slug":"android_using_volley_and_loopj_with_self_signed_certificates","markdown":"<script src=\"https://raw.github.com/moski/gist-Blogger/master/public/gistLoader.js\" type=\"text/javascript\"></script> \n\nA new Android networking library named [Volley](https://developers.google.com/events/io/sessions/325304728) was introduced this year at Google I/O. According to [Ficus Kirkpatrick](https://twitter.com/ficus), one of the creators, it should provide a performance boost, give customization options, offer request tracing and more. We recently converted most of our networking stack to Volley, though we still use [Loopj](http://loopj.com/android-async-http/) for making POST requests as we found some limitations with Volley.  We use self-signed certificates during development and thus needed to work that out with each library. Here's how to make that work in both libraries. \n\n## Loopj\nThe first step is to grab the self-signed certificate from the server which you'd like to make requests against and copy it to your local development environment. Easy enough, just use something like scp to copy it down.  Once you have the server's self-signed certificate locally, convert it to BKS format. Assuming your certificate is in CRT format, you can use this command: \n\n <pre>keytool -importcert -v -trustcacerts -file \"server.crt\" -alias imeto_alias \n-keystore \"server.bks\" -provider org.bouncycastle.jce.provider.BouncyCastleProvider \n-providerpath \"bcprov-jdk16-146.jar\" -storetype BKS</pre>\n\nWhen you run this command you will be prompted for a password. Remember whatever password you enter as you will need to modify strings.xml to include it.  The next step is to copy your certificate to your resources directory in your Android project: /res/raw. Once the certificate is in your project locally, modify your strings.xml file to include the password you were prompted for. \n<pre>&lt;string name=\"store_pass\"&gt;your password here&lt;/string&gt;</pre>Next, create a custom socket factory class which uses your self-signed certificate in /res/raw (or wherever you placed it). Below is an example.  <script src=\"https://gist.github.com/rmadden/6624182.js\"></script> <script type=\"mce-text/javascript\" src=\"https://gist.github.com/rmadden/37915f90407b40b8719c.js\"></script>The last step to get Loopj requests to work is to instantiate an Async client and use your custom SSL factory.  <script src=\"https://gist.github.com/rmadden/6624145.js\"></script> \n\n## Volley\nThis will cover any Loopj requests, but what about Volley? [There are several stack overflow threads](http://stackoverflow.com/questions/11857417/x509trustmanager-override-without-allowing-all-certs) describing how to effectively ignore certificates which seems to work with Volley. Ignoring SSL certificates is very dangerous so be careful about making sure this code does not run in production. Below is an example of class that will create an X509TrustManager that will accept all certificates.  <script src=\"https://gist.github.com/rmadden/6624128.js\"></script>","html":"<script src=\"https://raw.github.com/moski/gist-Blogger/master/public/gistLoader.js\" type=\"text/javascript\"></script> \n\n<p>A new Android networking library named <a href=\"https://developers.google.com/events/io/sessions/325304728\">Volley</a> was introduced this year at Google I/O. According to <a href=\"https://twitter.com/ficus\">Ficus Kirkpatrick</a>, one of the creators, it should provide a performance boost, give customization options, offer request tracing and more. We recently converted most of our networking stack to Volley, though we still use <a href=\"http://loopj.com/android-async-http/\">Loopj</a> for making POST requests as we found some limitations with Volley.  We use self-signed certificates during development and thus needed to work that out with each library. Here's how to make that work in both libraries. </p>\n\n<h2 id=\"loopj\">Loopj</h2>\n\n<p>The first step is to grab the self-signed certificate from the server which you'd like to make requests against and copy it to your local development environment. Easy enough, just use something like scp to copy it down.  Once you have the server's self-signed certificate locally, convert it to BKS format. Assuming your certificate is in CRT format, you can use this command: </p>\n\n<pre>keytool -importcert -v -trustcacerts -file \"server.crt\" -alias imeto_alias \n-keystore \"server.bks\" -provider org.bouncycastle.jce.provider.BouncyCastleProvider \n-providerpath \"bcprov-jdk16-146.jar\" -storetype BKS</pre>\n\n<p>When you run this command you will be prompted for a password. Remember whatever password you enter as you will need to modify strings.xml to include it.  The next step is to copy your certificate to your resources directory in your Android project: /res/raw. Once the certificate is in your project locally, modify your strings.xml file to include the password you were prompted for.  </p>\n\n<p><pre>&lt;string name=\"store_pass\"&gt;your password here&lt;/string&gt;</pre>Next, create a custom socket factory class which uses your self-signed certificate in /res/raw (or wherever you placed it). Below is an example.  <script src=\"https://gist.github.com/rmadden/6624182.js\"></script> <script type=\"mce-text/javascript\" src=\"https://gist.github.com/rmadden/37915f90407b40b8719c.js\"></script>The last step to get Loopj requests to work is to instantiate an Async client and use your custom SSL factory.  <script src=\"https://gist.github.com/rmadden/6624145.js\"></script> </p>\n\n<h2 id=\"volley\">Volley</h2>\n\n<p>This will cover any Loopj requests, but what about Volley? <a href=\"http://stackoverflow.com/questions/11857417/x509trustmanager-override-without-allowing-all-certs\">There are several stack overflow threads</a> describing how to effectively ignore certificates which seems to work with Volley. Ignoring SSL certificates is very dangerous so be careful about making sure this code does not run in production. Below is an example of class that will create an X509TrustManager that will accept all certificates.  <script src=\"https://gist.github.com/rmadden/6624128.js\"></script></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1385569140000,"created_by":1,"updated_at":1412639596000,"updated_by":1,"published_at":1385569140000,"published_by":1},{"id":3,"uuid":"cc0c5ebe-0ee4-45c3-92df-b1ecfd93047c","title":"A Mercurial Workflow for Git-minded Users","slug":"a_simple_mercurial_workflow","markdown":"My goal as a developer is to deliver a great product in the least amount of time possible without sacrificing quality.  In recent years I've refined my workflow to facilitate my needs.  Having a strong workflow is an important factor when trying to produce a high quality deliverable.  I'd like to highlight some of the things I've learned along the way that have helped me deliver good code.  That being said, I believe that you should own your workflow.  What may work for you may not seem natural to another developer.  There is no \"right\" way.  The \"right\" way to me is the methodology that allows you to create something quickly with high quality and does not create problems for other developers.<a name=\"more\"></a> One of the most important tools we work with here at Sprout is [Mercurial](http://mercurial.selenic.com/ \"Mercurial\").  Coming from the git world, I wasn't the biggest fan when I first started using it.  I have since found a way of using it that's intuitive to me. With that out of the way, Mercurial has grown on me.  My workflow consists of four basic operations: \n\n*   Fork\n*   Work\n*   Rebase\n*   CollapseAnd repeat if necessary.  \n\n### [Fork](http://mercurial.selenic.com/wiki/QuickStart \"Fork\")\nWhen starting a new project on an existing codebase, I fork our default branch.  I then work on this forked clone as long as necessary until the feature is completed.  By completed I mean that the project's goals have been hit, all the unit tests for coverage have been written and pass, and the integration is working.  \n\n <pre class=\"callout\" lang=\"bash\">hg clone ssh://hg@bitbucket.org/sproutsocial/my-repo my-repo-fork</pre> \n\n### Do some [Work](http://www.youtube.com/watch?v=kgS44boaw1c \"Work\")\nMake some commits, [build something](http://www.youtube.com/watch?v=O-o38nBo0b4 \"build something\")!  \n\n### [Rebase](http://mercurial.selenic.com/wiki/RebaseExtension \"Rebase\")\nWhen I am confident that my local project/code is in a stable enough state, bugs have been smashed, and things won't be changing, I then roll my code into a single logical changeset.  The first step is to rebase the code onto upstream changes.  This effectively replays my code on top of upstream changes; if there are any conflicts they will need be resolved during the rebase.  Note, I always clone the repository that I'm rebasing to a backup copy in case the rebase goes bad. If you haven't already, enable the rebase extension in your .hgrc file.  \n\n <pre class=\"callout\" lang=\"bash\">[extensions]\nrebase =</pre> You may also need to change the phases of the changesets if they've been shared or pushed to another repository. I did indeed have to change the phases so for sake of this example here is the command I used to change my phases locally:  \n\n <pre class=\"callout\" lang=\"bash\">hg phase -f -d 5182</pre>Essentially this tells Mercurial that the changesets are mutable. Since my code is shared on Bitbucket the phases of these changesets were set to \"public\", so they are immutable. The command above forces \"-f\" them into the draft state \"-d\".  You can read more about phases here:  [Mercurial Phases](http://mercurial.selenic.com/wiki/Phases \"Mercurial Phases\") Here is what a typical commit history looks like before the rebase. My changesets start at revision number 5182 with the parent being 5181\\.  \n\n<center> [![](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/before-rebase1.png \"before-rebase\")](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/before-rebase1.png) </center> \n You can see the parent here is 5181\\. I then run the rebase command: \n\n<pre class=\"callout\" lang=\"bash\">hg pull --rebase ssh://hg@bitbucket.org/sproutsocial/my-repo</pre>After running the rebase command my commits are now on top of the upstream changes:  \n\n<center> [![](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/rebased.png \"rebased\")](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/rebased.png) </center> \nNotice how the revision number of the parent of my first changeset is now set to 5197 and my first commits revision number is 5198\\.  \n\n### [ Collapse using Histedit](http://mercurial.selenic.com/wiki/HisteditExtension \"Collapse\")\nNow that my code is rebased on top of the upstream changes and all conflicts have been resolved it's time to squash my historical commits into a single logical changeset.  Again, be safe and make a cloned backup of your now rebased fork in case the histedit goes bad. You will also need to install the histedit .py script and enable the extension in your .hgrc file.  \n\n <pre class=\"callout\" lang=\"bash\">[extensions]\nhistedit = /Users/rob/sprout/hg_repos/histedit/hg_histedit.py</pre>Then simply find the revision number from which you want to collapse and get going.  \n\n <pre class=\"callout\" lang=\"bash\">hg histedit -r 5198</pre>After running the histedit command I am presented with this menu:  \n\n<center> [![](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/histedit-menu.png \"histedit-menu\")](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/histedit-menu.png)</center> \n I am presented with several options for each listed changeset. Typically I just fold all but the first changesets into the initial changset and leave the commit message history. In this case I want to change the first commit's message to \"Collapsed\" to illustrate this example. After the histedit completes my history now looks as such:  \n\n <center>[![](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/collapsed-commit.png \"collapsed commit\")](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/collapsed-commit.png)</center> \n What does this give you? For me it gives us the ability to avoid merges in our main deployed branch. In case anything goes wrong when deploying we can simply strip the top-most commit (now a rebased and collapsed) from the repository and quickly revert back to a previous state without having to untangle merges. It also gives the ability to do a very simple diff operation on your forked repository against the main line code, highlighting which files have been touched and what changes are incoming. There are certainly things I am hand-waiving here. In particular, often when rebasing one will encounter conflicts. This is unavoidable. If you were to merge the upstream changes into your local clone you would have to resolve conflicts as well. By doing a rebase you are forcing all conflict resolution to happen before moving your code onto the main deployed branch. You will also lose your commit history. For me this is well worth the price of having a single logical changeset. You can always leave your uncollapsed clone lying around in case you want the commit history.  \n\n### Done\nThat's it! As I alluded to when I started, this may not be for you. I really like this workflow mostly because after a large project that spans several weeks or months, I have one logical commit to move to the deploy branch. Simple is beautiful.","html":"<p>My goal as a developer is to deliver a great product in the least amount of time possible without sacrificing quality.  In recent years I've refined my workflow to facilitate my needs.  Having a strong workflow is an important factor when trying to produce a high quality deliverable.  I'd like to highlight some of the things I've learned along the way that have helped me deliver good code.  That being said, I believe that you should own your workflow.  What may work for you may not seem natural to another developer.  There is no \"right\" way.  The \"right\" way to me is the methodology that allows you to create something quickly with high quality and does not create problems for other developers.<a name=\"more\"></a> One of the most important tools we work with here at Sprout is <a href=\"http://mercurial.selenic.com/\" title=\"Mercurial\">Mercurial</a>.  Coming from the git world, I wasn't the biggest fan when I first started using it.  I have since found a way of using it that's intuitive to me. With that out of the way, Mercurial has grown on me.  My workflow consists of four basic operations: </p>\n\n<ul>\n<li>Fork</li>\n<li>Work</li>\n<li>Rebase</li>\n<li>CollapseAnd repeat if necessary.  </li>\n</ul>\n\n<h3 id=\"forkhttpmercurialseleniccomwikiquickstartfork\"><a href=\"http://mercurial.selenic.com/wiki/QuickStart\" title=\"Fork\">Fork</a></h3>\n\n<p>When starting a new project on an existing codebase, I fork our default branch.  I then work on this forked clone as long as necessary until the feature is completed.  By completed I mean that the project's goals have been hit, all the unit tests for coverage have been written and pass, and the integration is working.  </p>\n\n<p><pre class=\"callout\" lang=\"bash\">hg clone ssh://hg@bitbucket.org/sproutsocial/my-repo my-repo-fork</pre> </p>\n\n<h3 id=\"dosomeworkhttpwwwyoutubecomwatchvkgs44boaw1cwork\">Do some <a href=\"http://www.youtube.com/watch?v=kgS44boaw1c\" title=\"Work\">Work</a></h3>\n\n<p>Make some commits, <a href=\"http://www.youtube.com/watch?v=O-o38nBo0b4\" title=\"build something\">build something</a>!  </p>\n\n<h3 id=\"rebasehttpmercurialseleniccomwikirebaseextensionrebase\"><a href=\"http://mercurial.selenic.com/wiki/RebaseExtension\" title=\"Rebase\">Rebase</a></h3>\n\n<p>When I am confident that my local project/code is in a stable enough state, bugs have been smashed, and things won't be changing, I then roll my code into a single logical changeset.  The first step is to rebase the code onto upstream changes.  This effectively replays my code on top of upstream changes; if there are any conflicts they will need be resolved during the rebase.  Note, I always clone the repository that I'm rebasing to a backup copy in case the rebase goes bad. If you haven't already, enable the rebase extension in your .hgrc file.  </p>\n\n<p><pre class=\"callout\" lang=\"bash\">[extensions]\nrebase =</pre> You may also need to change the phases of the changesets if they've been shared or pushed to another repository. I did indeed have to change the phases so for sake of this example here is the command I used to change my phases locally:  </p>\n\n<p><pre class=\"callout\" lang=\"bash\">hg phase -f -d 5182</pre>Essentially this tells Mercurial that the changesets are mutable. Since my code is shared on Bitbucket the phases of these changesets were set to \"public\", so they are immutable. The command above forces \"-f\" them into the draft state \"-d\".  You can read more about phases here:  <a href=\"http://mercurial.selenic.com/wiki/Phases\" title=\"Mercurial Phases\">Mercurial Phases</a> Here is what a typical commit history looks like before the rebase. My changesets start at revision number 5182 with the parent being 5181.  </p>\n\n<p><center> <a href=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/before-rebase1.png\"><img src=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/before-rebase1.png\" alt=\"\" title=\"before-rebase\" /></a> </center> <br />\n You can see the parent here is 5181. I then run the rebase command: </p>\n\n<p><pre class=\"callout\" lang=\"bash\">hg pull --rebase ssh://hg@bitbucket.org/sproutsocial/my-repo</pre>After running the rebase command my commits are now on top of the upstream changes:  </p>\n\n<p><center> <a href=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/rebased.png\"><img src=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/rebased.png\" alt=\"\" title=\"rebased\" /></a> </center> <br />\nNotice how the revision number of the parent of my first changeset is now set to 5197 and my first commits revision number is 5198.  </p>\n\n<h3 id=\"collapseusinghistedithttpmercurialseleniccomwikihisteditextensioncollapse\"><a href=\"http://mercurial.selenic.com/wiki/HisteditExtension\" title=\"Collapse\"> Collapse using Histedit</a></h3>\n\n<p>Now that my code is rebased on top of the upstream changes and all conflicts have been resolved it's time to squash my historical commits into a single logical changeset.  Again, be safe and make a cloned backup of your now rebased fork in case the histedit goes bad. You will also need to install the histedit .py script and enable the extension in your .hgrc file.  </p>\n\n<p><pre class=\"callout\" lang=\"bash\">[extensions]\nhistedit = /Users/rob/sprout/hg<em>repos/histedit/hg</em>histedit.py</pre>Then simply find the revision number from which you want to collapse and get going.  </p>\n\n<p><pre class=\"callout\" lang=\"bash\">hg histedit -r 5198</pre>After running the histedit command I am presented with this menu:  </p>\n\n<p><center> <a href=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/histedit-menu.png\"><img src=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/histedit-menu.png\" alt=\"\" title=\"histedit-menu\" /></a></center> <br />\n I am presented with several options for each listed changeset. Typically I just fold all but the first changesets into the initial changset and leave the commit message history. In this case I want to change the first commit's message to \"Collapsed\" to illustrate this example. After the histedit completes my history now looks as such:  </p>\n\n<p><center><a href=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/collapsed-commit.png\"><img src=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/collapsed-commit.png\" alt=\"\" title=\"collapsed commit\" /></a></center> \n What does this give you? For me it gives us the ability to avoid merges in our main deployed branch. In case anything goes wrong when deploying we can simply strip the top-most commit (now a rebased and collapsed) from the repository and quickly revert back to a previous state without having to untangle merges. It also gives the ability to do a very simple diff operation on your forked repository against the main line code, highlighting which files have been touched and what changes are incoming. There are certainly things I am hand-waiving here. In particular, often when rebasing one will encounter conflicts. This is unavoidable. If you were to merge the upstream changes into your local clone you would have to resolve conflicts as well. By doing a rebase you are forcing all conflict resolution to happen before moving your code onto the main deployed branch. You will also lose your commit history. For me this is well worth the price of having a single logical changeset. You can always leave your uncollapsed clone lying around in case you want the commit history.  </p>\n\n<h3 id=\"done\">Done</h3>\n\n<p>That's it! As I alluded to when I started, this may not be for you. I really like this workflow mostly because after a large project that spans several weeks or months, I have one logical commit to move to the deploy branch. Simple is beautiful.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1359734220000,"created_by":1,"updated_at":1412723955283,"updated_by":1,"published_at":1359734220000,"published_by":1},{"id":4,"uuid":"eb112dfb-393d-4214-97b1-21eb94cd5d09","title":"Using ActiveMQ as a Failover Buffer","slug":"using_active_mq_as_a_failover_buffer","markdown":"I wrote this post on our engineering blog over a year and a half ago.  Check out the original here: [The Queue Behind the Curtain](http://engineeringsproutsocialcom.zippysites.com/2011/06/the-queue-behind-the-curtain/)\n\nI will try to keep this short, sweet, and to the point. There's a lot that goes on behind the pretty face that is sproutsocial.com. A web of systems work together to gather, enrich and store gobs of data quickly for our users. Messages are passed between these systems to coordinate work. This entry will focus on my recent experience with designing for high availability with Apache's ActiveMQ. \n<a name=\"more\"></a>After successfully setting up two instances of the ActiveMQ server pointing towards a MySQL database sitting on a separate external server (which was a difficult task in itself), the need arose for us to test the failover/redundancy of the entire system. For those not familiar with ActiveMQ, there is a specific nomenclature used as there is with many CS related topics. Here are a couple basic terms: \n\n*   **Producer** - Generates the jobs that are submitted to the ActiveMQ server.\n*   **Listener** - Listens for jobs on the ActiveMQ server and consumes them.\n\n### The Code\nMy goal was the create a producer that sent unique jobs every n seconds while a simple Listener listened for these jobs and printed debugging information. Here's how I set this up. First I created a simple producer in python that attempted to connect to one of the ActiveMQ servers; if that failed, it attempted to connect to the second ActiveMQ server; if neither time was successful, it waited for a period and then retried. \n\n    SERVER1 = 'X.X.X.X' \n    SERVER2 = 'X.X.X.X' \n    PORT = XXXXX \n\n    client = PublishClient(SERVER1, ACTIVEMQ_PORT) \n    ip_dest = '' \n    activemq_ip = SERVER1 \n\n    try: \n        response = client.connect(USER, PASSWORD) \n        activemq_ip = SERVER1 \n    except Exception as e: \n        client = PublishClient(SERVER2, PORT) \n\n    try: \n        response = client.connect(USER, PASSWORD) \n        activemq_ip = SERVER2 \n    except Exception as e: \n        if (mq_params['count'] == 0): \n            print \"Could not connect to activemq.\" \n            time.sleep(3) \n            mq_params['count'] += 1 self.send(mq_params) \n            return \n        else: \n            print \"Could not connect after retry, return 500.\" \n            sys.exit(0) \n\n    client.send(queue, json_str) \n    client.disconnect()\n\nPerhaps not the cleanest python script, but for testing purposes it did the trick. On the other side of the queue, I created a Java listener to consume the jobs and log debugging information. Here's a snippet of the Listener, particularly the overridden JMS 'OnMessage()' method in my FailoverListener class:  \n\n    @Override \n    public void onMessage(Message msg) \n    { \n        if (msg instanceof BytesMessage) \n        { \n            BytesMessage bMsg = (BytesMessage) msg; \n            StringBuilder buffer = new StringBuilder(); \n\n            try { \n                for (int i = 0; i &lt; (int)bMsg.getBodyLength(); i++) {\n                    buffer.append((char) bMsg.readByte()); \n                } \n            } catch (JMSException e) { \n                System.out.println(\"Failed to convert byte msg to string\"); \n            }\n\n            String text = buffer.toString().trim(); \n            FailoverPojo pojo = new FailoverPojo(); \n            Gson gson = new Gson(); \n            pojo = gson.fromJson(text, FailoverPojo.class); \n            System.out.println(\"Received message: \" + pojo.asJson()); // Must call acknowledge on Message object specifically. \n\n            try { \n                msg.acknowledge(); \n            } catch (JMSException e) { \n                e.printStackTrace(); \n            } \n        }  \n    }\n\nMost importantly, the connection for the listener needs to use the failover String as per the ActiveMQ Java library:  \n\n    /* IMPORTANT PART */ \n    private static final String connStr = \"failover://(tcp://IP1:PORT,tcp://IP2:PORT)?randomize=false\"; \n    cf = new ActiveMQConnectionFactory(connStr); \n\n    try { \n        conn = cf.createConnection(); \n    } catch (JMSException e) { \n        System.out.println(e); \n    } \n\n    Destination failoverDest = new ActiveMQQueue(\"TestFailover\"); \n    Session failoverSession = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE); \n    MessageConsumer failoverConsumer = failoverSession.createConsumer(failoverDest); \n    failoverConsumer.setMessageListener(new FailoverListener()); \n    conn.start(); assertNotNull(conn.getClientID());\n\nThat ensures that the Java listener will dynamically failover if the current server it's listening to goes down.  Now, here's the fun part. Hop on to each of your ActiveMQ servers using ssh and start each instance. Whichever grabs the database lock first will be the actual server in use. Start your Java listener and make sure that it connects to your ActiveMQ server. Next, run the producer that will send jobs to the ActiveMQ server every n seconds (specified in the script). Lastly, kill the currently running ActiveMQ server and watch the other server grab the lock and pick up where the previous server left off without a hitch.  Here are some screenshots showing the live failover. The first is the python producer sending jobs to the queue and the second is the Java listener consuming said jobs: \n\n[![](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/console1.png \"console\")](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/console1.png)\n\n[![](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/console2.png \"console2\")](http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/console2.png)\n\n### Insights\nIt's possible that one of your jobs will fail during the downtime, depending on your retry threshold (the amount of time that your python script sleeps before trying to resend). You will see the job being retried and successfully submitted to the new ActiveMQ server. On the other side, your listener will have caught the switch and seamlessly grabbed the job from the new server.  That's it! Try experimenting with how low you can set the \"retry threshold\". I was able to get it down to roughly four seconds before the job fails.","html":"<p>I wrote this post on our engineering blog over a year and a half ago.  Check out the original here: <a href=\"http://engineeringsproutsocialcom.zippysites.com/2011/06/the-queue-behind-the-curtain/\">The Queue Behind the Curtain</a></p>\n\n<p>I will try to keep this short, sweet, and to the point. There's a lot that goes on behind the pretty face that is sproutsocial.com. A web of systems work together to gather, enrich and store gobs of data quickly for our users. Messages are passed between these systems to coordinate work. This entry will focus on my recent experience with designing for high availability with Apache's ActiveMQ. <br />\n<a name=\"more\"></a>After successfully setting up two instances of the ActiveMQ server pointing towards a MySQL database sitting on a separate external server (which was a difficult task in itself), the need arose for us to test the failover/redundancy of the entire system. For those not familiar with ActiveMQ, there is a specific nomenclature used as there is with many CS related topics. Here are a couple basic terms: </p>\n\n<ul>\n<li><strong>Producer</strong> - Generates the jobs that are submitted to the ActiveMQ server.</li>\n<li><strong>Listener</strong> - Listens for jobs on the ActiveMQ server and consumes them.</li>\n</ul>\n\n<h3 id=\"thecode\">The Code</h3>\n\n<p>My goal was the create a producer that sent unique jobs every n seconds while a simple Listener listened for these jobs and printed debugging information. Here's how I set this up. First I created a simple producer in python that attempted to connect to one of the ActiveMQ servers; if that failed, it attempted to connect to the second ActiveMQ server; if neither time was successful, it waited for a period and then retried. </p>\n\n<pre><code>SERVER1 = 'X.X.X.X' \nSERVER2 = 'X.X.X.X' \nPORT = XXXXX \n\nclient = PublishClient(SERVER1, ACTIVEMQ_PORT) \nip_dest = '' \nactivemq_ip = SERVER1 \n\ntry: \n    response = client.connect(USER, PASSWORD) \n    activemq_ip = SERVER1 \nexcept Exception as e: \n    client = PublishClient(SERVER2, PORT) \n\ntry: \n    response = client.connect(USER, PASSWORD) \n    activemq_ip = SERVER2 \nexcept Exception as e: \n    if (mq_params['count'] == 0): \n        print \"Could not connect to activemq.\" \n        time.sleep(3) \n        mq_params['count'] += 1 self.send(mq_params) \n        return \n    else: \n        print \"Could not connect after retry, return 500.\" \n        sys.exit(0) \n\nclient.send(queue, json_str) \nclient.disconnect()\n</code></pre>\n\n<p>Perhaps not the cleanest python script, but for testing purposes it did the trick. On the other side of the queue, I created a Java listener to consume the jobs and log debugging information. Here's a snippet of the Listener, particularly the overridden JMS 'OnMessage()' method in my FailoverListener class:  </p>\n\n<pre><code>@Override \npublic void onMessage(Message msg) \n{ \n    if (msg instanceof BytesMessage) \n    { \n        BytesMessage bMsg = (BytesMessage) msg; \n        StringBuilder buffer = new StringBuilder(); \n\n        try { \n            for (int i = 0; i &amp;lt; (int)bMsg.getBodyLength(); i++) {\n                buffer.append((char) bMsg.readByte()); \n            } \n        } catch (JMSException e) { \n            System.out.println(\"Failed to convert byte msg to string\"); \n        }\n\n        String text = buffer.toString().trim(); \n        FailoverPojo pojo = new FailoverPojo(); \n        Gson gson = new Gson(); \n        pojo = gson.fromJson(text, FailoverPojo.class); \n        System.out.println(\"Received message: \" + pojo.asJson()); // Must call acknowledge on Message object specifically. \n\n        try { \n            msg.acknowledge(); \n        } catch (JMSException e) { \n            e.printStackTrace(); \n        } \n    }  \n}\n</code></pre>\n\n<p>Most importantly, the connection for the listener needs to use the failover String as per the ActiveMQ Java library:  </p>\n\n<pre><code>/* IMPORTANT PART */ \nprivate static final String connStr = \"failover://(tcp://IP1:PORT,tcp://IP2:PORT)?randomize=false\"; \ncf = new ActiveMQConnectionFactory(connStr); \n\ntry { \n    conn = cf.createConnection(); \n} catch (JMSException e) { \n    System.out.println(e); \n} \n\nDestination failoverDest = new ActiveMQQueue(\"TestFailover\"); \nSession failoverSession = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE); \nMessageConsumer failoverConsumer = failoverSession.createConsumer(failoverDest); \nfailoverConsumer.setMessageListener(new FailoverListener()); \nconn.start(); assertNotNull(conn.getClientID());\n</code></pre>\n\n<p>That ensures that the Java listener will dynamically failover if the current server it's listening to goes down.  Now, here's the fun part. Hop on to each of your ActiveMQ servers using ssh and start each instance. Whichever grabs the database lock first will be the actual server in use. Start your Java listener and make sure that it connects to your ActiveMQ server. Next, run the producer that will send jobs to the ActiveMQ server every n seconds (specified in the script). Lastly, kill the currently running ActiveMQ server and watch the other server grab the lock and pick up where the previous server left off without a hitch.  Here are some screenshots showing the live failover. The first is the python producer sending jobs to the queue and the second is the Java listener consuming said jobs: </p>\n\n<p><a href=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/console1.png\"><img src=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/console1.png\" alt=\"\" title=\"console\" /></a></p>\n\n<p><a href=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/console2.png\"><img src=\"http://engineeringsproutsocialcom.zippysites.com/wp-content/uploads/2012/12/console2.png\" alt=\"\" title=\"console2\" /></a></p>\n\n<h3 id=\"insights\">Insights</h3>\n\n<p>It's possible that one of your jobs will fail during the downtime, depending on your retry threshold (the amount of time that your python script sleeps before trying to resend). You will see the job being retried and successfully submitted to the new ActiveMQ server. On the other side, your listener will have caught the switch and seamlessly grabbed the job from the new server.  That's it! Try experimenting with how low you can set the \"retry threshold\". I was able to get it down to roughly four seconds before the job fails.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1356559260000,"created_by":1,"updated_at":1412639990000,"updated_by":1,"published_at":1356559260000,"published_by":1},{"id":5,"uuid":"51f23f5b-6162-4e13-8524-4b0ccbba1d14","title":"Python, MySQL, Django, and MCFC Data","slug":"python_my_sql_django_and_mcfc_data","markdown":"I've been messing around with the MCFC opta data.  The first thing I wanted to do was take the .xls file and dump it into a MySQL database.  I wrote a python script to do so.  I also started writing a small API using django around the MySQL database I created.  The idea being that I would then be able to use SQL + python to easily manipulate the data however I wanted.  You can find what I have thus far here [MCFC API](https://github.com/rmadden/mcfc_analytics_api).  More to come in the future.","html":"<p>I've been messing around with the MCFC opta data.  The first thing I wanted to do was take the .xls file and dump it into a MySQL database.  I wrote a python script to do so.  I also started writing a small API using django around the MySQL database I created.  The idea being that I would then be able to use SQL + python to easily manipulate the data however I wanted.  You can find what I have thus far here <a href=\"https://github.com/rmadden/mcfc_analytics_api\">MCFC API</a>.  More to come in the future.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1356475740000,"created_by":1,"updated_at":1359000053000,"updated_by":1,"published_at":1356475740000,"published_by":1},{"id":6,"uuid":"f1b66562-ee22-4ae6-9694-559b781fe136","title":"Using Postmark to parse emails","slug":"using_postmark_to_parse_emails","markdown":"Check out the original blog post about [Postmark](https://postmarkapp.com/) inbound processing over at [Photosynthesis](http://engineeringsproutsocialcom.zippysites.com/2012/02/thanks-for-your-letters-now-we-can-parse-them/).  \n\n _Overview: This post focuses on our experiences building on Postmark's Inbound feature._\n\n### Postmark is our trusted mail carrier\n Here at Sprout we use [Postmark](http://postmarkapp.com/ \"Postmark\") to deliver the emails that come out of our application. An example is the welcome email we send after someone signs up. Rather than build and maintain our own infrastructure to deliver emails, we gladly delegate that to them!\n<a name=\"more\"></a>Most engineers think initially, \"why wouldn't you just run your own Postfix?\" The answer is that deliverability is hard. Getting a scalable email infrastructure up and running isn't too daunting. That's especially true for us as one of our Dev Ops engineers built the Postfix infrastructure that underlies Rackspace Cloud Sites. However, ensuring deliverability of millions of emails is scary as hell, on our own. Thankfully, Postmark knows the tricks and they give really clear reporting to prove it. Our results have been outstanding, hovering at around 99.7% of our emails reaching their destination. That's even more than [37signals gets](http://37signals.com/svn/posts/3096-giving-away-the-secrets-of-993-email-delivery)&nbsp;using their home-grown infrastructure. Besides, the \"cloud\" is hot for a reason: specialization of labor. We're small and every minute we spend not working on our core competency, our product, is not time well spent.  \n\n### Now they deliver to our house too\n So we love Postmark and were stoked when [they announced support for inbound emails](http://blog.postmarkapp.com/post/15687406657/introducing-postmark-inbound-easily-parse-replies-other). The timing couldn't have been better.&nbsp;We had just started spec'ing out an enhancement to our Tasks feature (now [released](http://updates.sproutsocial.com/post/17661794773/update-task-notifications-and-email-reply)), which would bring email notifications. The gist is that users can task social media content for a teammate to handle; for example, responding to a customer question. Team members may also communicate with each other, in Sprout, on a thread related to the task at hand. Given the complexities of receiving emails, we expected to start with just a one-way, no reply email notification when some task activity happened. That would allow users to get quick visibility, but would leave them helpless until they got back to a computer. Postmark's feature made it so damned easy, building the reply feature now was a no brainer.\n\n &nbsp;  ![image](http://media.tumblr.com/tumblr_lzq69nuB3L1qhzicn.png) \n\n &nbsp;Here is the gist of how the inbound feature works from a high level, if you are not familiar. A user receives an email from Sprout (via Postmark). The user then replies to that email, which is sent back to Postmark using a Postmark-generated From address. That From has a unique hash that lets Postmark know the response is intended for you.&nbsp;Postmark then converts that reply into JSON which they POST to a public HTTP endpoint that you specified ahead of time. Your endpoint then receives the HTTP POST with the Postmark-generated JSON representation of the email the user sent. In our case, we use the inbound JSON to create comments on the given task within Sprout. You can get more details on how this process works [at Postmark's site](http://developer.postmarkapp.com/developer-inbound-example.html).  \n\n### The one gotcha\n Our experience with Postmark's inbound feature was relatively painless besides one medium-sized caveat: Postmark does not parse out custom reply header text. Here's what we mean. Open your email client and hit 'reply' on a message. Above the original message text you will notice a string that is pre-pended. Here is an example of what gmail prepends:  \n\n <pre class=\"column\" lang=\"json\">On Fri, Feb 17, 2012 at 1:49 PM, Sprout Social  wrote:</pre> We love user experience at Sprout, and so stripping this line and all of the text that will appear below it, is ideal. Remember, the text _above _that line is the content we want to capture, not what's below.&nbsp;Who wants to see a messy email thread at the bottom of their one line comment? From a programming perspective, this seems like no big deal, but when you delve into the variations across email clients, you find there are many cases to handle: Gmail, Hotmail, Yahoo! Mail, several Outlook versions, Mac Mail, Thunderbird, etc. Online stats reveal just how many clients are popular and some are really surprising for 2012\\. As one source, the fantastic Litmus published their take on the [breakdown of email client usage](http://litmus.com/resources/email-client-stats).  While they don't parse it out for you, Postmark at least offers some guidance, by passing the X-Mailer header in their JSON representation. That could direct what regex to use, but it's not comprehensively provided. For example, although X-Mailer is very prevalent, Gmail doesn't send it. Jerks. For us, what it all boiled down to is a class that searches the available headers in the inbound payload and then uses regular expressions to parse out the particular version of the line we want to strip. Here is an example of a regular expression that matches the above prepended reply text: \n\n <pre class=\"column\" lang=\"java\">gmail_regex = \".*\\\"?Sprout Social\\\"?\\s+\\s*wrote:.*\"</pre> This isn't an ideal solution as we now have to maintain which email client sends what headers and how their pre-pended reply string appears. Presumably, this can change over time too. It would be great if Postmark handled this mess once and for all, else each developer will have to reinvent the wheel.  In closing, we're big fans of the feature, and indirectly, our users will be too.","html":"<p>Check out the original blog post about <a href=\"https://postmarkapp.com/\">Postmark</a> inbound processing over at <a href=\"http://engineeringsproutsocialcom.zippysites.com/2012/02/thanks-for-your-letters-now-we-can-parse-them/\">Photosynthesis</a>.  </p>\n\n<p><em>Overview: This post focuses on our experiences building on Postmark's Inbound feature.</em></p>\n\n<h3 id=\"postmarkisourtrustedmailcarrier\">Postmark is our trusted mail carrier</h3>\n\n<p>Here at Sprout we use <a href=\"http://postmarkapp.com/\" title=\"Postmark\">Postmark</a> to deliver the emails that come out of our application. An example is the welcome email we send after someone signs up. Rather than build and maintain our own infrastructure to deliver emails, we gladly delegate that to them!\n<a name=\"more\"></a>Most engineers think initially, \"why wouldn't you just run your own Postfix?\" The answer is that deliverability is hard. Getting a scalable email infrastructure up and running isn't too daunting. That's especially true for us as one of our Dev Ops engineers built the Postfix infrastructure that underlies Rackspace Cloud Sites. However, ensuring deliverability of millions of emails is scary as hell, on our own. Thankfully, Postmark knows the tricks and they give really clear reporting to prove it. Our results have been outstanding, hovering at around 99.7% of our emails reaching their destination. That's even more than <a href=\"http://37signals.com/svn/posts/3096-giving-away-the-secrets-of-993-email-delivery\">37signals gets</a>&nbsp;using their home-grown infrastructure. Besides, the \"cloud\" is hot for a reason: specialization of labor. We're small and every minute we spend not working on our core competency, our product, is not time well spent.  </p>\n\n<h3 id=\"nowtheydelivertoourhousetoo\">Now they deliver to our house too</h3>\n\n<p>So we love Postmark and were stoked when <a href=\"http://blog.postmarkapp.com/post/15687406657/introducing-postmark-inbound-easily-parse-replies-other\">they announced support for inbound emails</a>. The timing couldn't have been better.&nbsp;We had just started spec'ing out an enhancement to our Tasks feature (now <a href=\"http://updates.sproutsocial.com/post/17661794773/update-task-notifications-and-email-reply\">released</a>), which would bring email notifications. The gist is that users can task social media content for a teammate to handle; for example, responding to a customer question. Team members may also communicate with each other, in Sprout, on a thread related to the task at hand. Given the complexities of receiving emails, we expected to start with just a one-way, no reply email notification when some task activity happened. That would allow users to get quick visibility, but would leave them helpless until they got back to a computer. Postmark's feature made it so damned easy, building the reply feature now was a no brainer.</p>\n\n<p>&nbsp;  <img src=\"http://media.tumblr.com/tumblr_lzq69nuB3L1qhzicn.png\" alt=\"image\" title=\"\" /> </p>\n\n<p>&nbsp;Here is the gist of how the inbound feature works from a high level, if you are not familiar. A user receives an email from Sprout (via Postmark). The user then replies to that email, which is sent back to Postmark using a Postmark-generated From address. That From has a unique hash that lets Postmark know the response is intended for you.&nbsp;Postmark then converts that reply into JSON which they POST to a public HTTP endpoint that you specified ahead of time. Your endpoint then receives the HTTP POST with the Postmark-generated JSON representation of the email the user sent. In our case, we use the inbound JSON to create comments on the given task within Sprout. You can get more details on how this process works <a href=\"http://developer.postmarkapp.com/developer-inbound-example.html\">at Postmark's site</a>.  </p>\n\n<h3 id=\"theonegotcha\">The one gotcha</h3>\n\n<p>Our experience with Postmark's inbound feature was relatively painless besides one medium-sized caveat: Postmark does not parse out custom reply header text. Here's what we mean. Open your email client and hit 'reply' on a message. Above the original message text you will notice a string that is pre-pended. Here is an example of what gmail prepends:  </p>\n\n<p><pre class=\"column\" lang=\"json\">On Fri, Feb 17, 2012 at 1:49 PM, Sprout Social  wrote:</pre> We love user experience at Sprout, and so stripping this line and all of the text that will appear below it, is ideal. Remember, the text _above _that line is the content we want to capture, not what's below.&nbsp;Who wants to see a messy email thread at the bottom of their one line comment? From a programming perspective, this seems like no big deal, but when you delve into the variations across email clients, you find there are many cases to handle: Gmail, Hotmail, Yahoo! Mail, several Outlook versions, Mac Mail, Thunderbird, etc. Online stats reveal just how many clients are popular and some are really surprising for 2012. As one source, the fantastic Litmus published their take on the <a href=\"http://litmus.com/resources/email-client-stats\">breakdown of email client usage</a>.  While they don't parse it out for you, Postmark at least offers some guidance, by passing the X-Mailer header in their JSON representation. That could direct what regex to use, but it's not comprehensively provided. For example, although X-Mailer is very prevalent, Gmail doesn't send it. Jerks. For us, what it all boiled down to is a class that searches the available headers in the inbound payload and then uses regular expressions to parse out the particular version of the line we want to strip. Here is an example of a regular expression that matches the above prepended reply text: </p>\n\n<p><pre class=\"column\" lang=\"java\">gmail_regex = \".<em>\\\"?Sprout Social\\\"?\\s+\\s</em>wrote:.*\"</pre> This isn't an ideal solution as we now have to maintain which email client sends what headers and how their pre-pended reply string appears. Presumably, this can change over time too. It would be great if Postmark handled this mess once and for all, else each developer will have to reinvent the wheel.  In closing, we're big fans of the feature, and indirectly, our users will be too.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1356461400000,"created_by":1,"updated_at":1412640031000,"updated_by":1,"published_at":1356461400000,"published_by":1},{"id":8,"uuid":"8bc8171f-d230-4d5e-84ba-f00f049645ad","title":"Android: edit your emulator's hosts file","slug":"android-edit-your-emulators-systemetchosts-file","markdown":"* Start up your emulator (I use [Genymotion](http://www.genymotion.com/))\n* Go to your sdk/platform-tools directory use the adb command line tool to modify the hosts file as seen below:\n\n![](/content/images/2014/Oct/Screen-Shot-2014-10-13-at-9-56-55-AM.png)","html":"<ul>\n<li>Start up your emulator (I use <a href=\"http://www.genymotion.com/\">Genymotion</a>)</li>\n<li>Go to your sdk/platform-tools directory use the adb command line tool to modify the hosts file as seen below:</li>\n</ul>\n\n<p><img src=\"/content/images/2014/Oct/Screen-Shot-2014-10-13-at-9-56-55-AM.png\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1413212308325,"created_by":1,"updated_at":1420244794433,"updated_by":1,"published_at":1413212411909,"published_by":1},{"id":9,"uuid":"b20637d5-6e73-41f3-98f5-8e015a004fd8","title":"Sailing in the British Virgin Islands","slug":"bvi-2014","markdown":"<h4>November 2014 • One Love & Halycon III</h4>\n\n<iframe width=\"800\" height=\"600\" src=\"//www.youtube.com/embed/47a7t6Os8GE\" frameborder=\"0\" allowfullscreen></iframe>\n<br />\n<iframe src=\"https://mapsengine.google.com/map/embed?mid=zR9rdmDTJH0g.kQ2FRFC3w9M0\" width=\"705\" height=\"600\" frameborder=\"0\" style=\"border:0\" allowfullscreen></iframe>","html":"<h4>November 2014 • One Love & Halycon III</h4>\n\n<iframe width=\"800\" height=\"600\" src=\"//www.youtube.com/embed/47a7t6Os8GE\" frameborder=\"0\" allowfullscreen></iframe>  \n\n<p><br />  </p>\n\n<iframe src=\"https://mapsengine.google.com/map/embed?mid=zR9rdmDTJH0g.kQ2FRFC3w9M0\" width=\"705\" height=\"600\" frameborder=\"0\" style=\"border:0\" allowfullscreen></iframe>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1418174359582,"created_by":1,"updated_at":1420579336934,"updated_by":1,"published_at":1418264479865,"published_by":1},{"id":10,"uuid":"e6d3390f-d4d2-4efd-a3fb-0bd7888c9f0a","title":"Organizing Your Evernotes","slug":"organizing-your-evernotes","markdown":"My brain has start to succomb to the processes of aging, eating everything in sight like a garbage disposal, not getting enough sunlight, and hard boozing. I have slowly realized that I will need to upgrade the hard disk of my mind. I've chosen Evernote as my new hardware (I already use Google as my CPU). With that in mind (pun intended?), I have decided that it's easiest to organize my Evernote Notebooks in a similar fashion to the [Unix Filesystem](http://en.wikipedia.org/wiki/Unix_filesystem).\n\n* **/etc**: I put things like instructions and other random stuff in here.\n* **/media**: I put recommendations from people, friends, the internet, of movies I want to watch, books I want to read, and music I want to explore in this bucket.\n* **/sbin**: I put all work related stuff in here.\n* **/share**: I keep a list of blog post ideas in here.\n* **/tmp**: I put my TODO list in here, or other transient things.\n\nBut, you can do whatever you damn please! As my friend [Ravi](https://twitter.com/ravi77o) would say: [\"Lifehack!\"](http://media.giphy.com/media/13PjdckGAXxjt6/giphy.gif).","html":"<p>My brain has start to succomb to the processes of aging, eating everything in sight like a garbage disposal, not getting enough sunlight, and hard boozing. I have slowly realized that I will need to upgrade the hard disk of my mind. I've chosen Evernote as my new hardware (I already use Google as my CPU). With that in mind (pun intended?), I have decided that it's easiest to organize my Evernote Notebooks in a similar fashion to the <a href=\"http://en.wikipedia.org/wiki/Unix_filesystem\">Unix Filesystem</a>.</p>\n\n<ul>\n<li><strong>/etc</strong>: I put things like instructions and other random stuff in here.</li>\n<li><strong>/media</strong>: I put recommendations from people, friends, the internet, of movies I want to watch, books I want to read, and music I want to explore in this bucket.</li>\n<li><strong>/sbin</strong>: I put all work related stuff in here.</li>\n<li><strong>/share</strong>: I keep a list of blog post ideas in here.</li>\n<li><strong>/tmp</strong>: I put my TODO list in here, or other transient things.</li>\n</ul>\n\n<p>But, you can do whatever you damn please! As my friend <a href=\"https://twitter.com/ravi77o\">Ravi</a> would say: <a href=\"http://media.giphy.com/media/13PjdckGAXxjt6/giphy.gif\">\"Lifehack!\"</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1430950025917,"created_by":1,"updated_at":1431120721872,"updated_by":1,"published_at":1430950058398,"published_by":1},{"id":11,"uuid":"3f2caf28-84d2-473c-8d6a-b0e7b7359d7a","title":"Git: Never Start a Commit Message with #","slug":"git-never-start-a-commit-message-with","markdown":"Never start a commit message in Git with a **#**.\n\nThis will lead to fifteen minutes of you wanting to throw your computer off a third floor window or into the nearest body of water.\n\nThe reason for this is that in an interactive rebase, Git treats any line prepended with a **#** as a comment. When git tries to \"replay\" the commits it will see an empty commit message for the commit that had a **#** and bomb out.\n\nHere's the original commit messages:\n\n![](/content/images/2016/Jan/original_commit_msgs.png)\n\nHere's the interactive rebase dialog in VIM:\n\n![](/content/images/2016/Jan/interactive_rebase.png)\n\nHere's me being dumb:\n\n![](/content/images/2016/Jan/reword.png)\n\n\nHere's the fun part:\n\n![](/content/images/2016/Jan/bomb.png)\n\nAnd the dynamite goes boom.","html":"<p>Never start a commit message in Git with a <strong>#</strong>.</p>\n\n<p>This will lead to fifteen minutes of you wanting to throw your computer off a third floor window or into the nearest body of water.</p>\n\n<p>The reason for this is that in an interactive rebase, Git treats any line prepended with a <strong>#</strong> as a comment. When git tries to \"replay\" the commits it will see an empty commit message for the commit that had a <strong>#</strong> and bomb out.</p>\n\n<p>Here's the original commit messages:</p>\n\n<p><img src=\"/content/images/2016/Jan/original_commit_msgs.png\" alt=\"\" /></p>\n\n<p>Here's the interactive rebase dialog in VIM:</p>\n\n<p><img src=\"/content/images/2016/Jan/interactive_rebase.png\" alt=\"\" /></p>\n\n<p>Here's me being dumb:</p>\n\n<p><img src=\"/content/images/2016/Jan/reword.png\" alt=\"\" /></p>\n\n<p>Here's the fun part:</p>\n\n<p><img src=\"/content/images/2016/Jan/bomb.png\" alt=\"\" /></p>\n\n<p>And the dynamite goes boom.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1452646169659,"created_by":1,"updated_at":1452647529855,"updated_by":1,"published_at":1452647529856,"published_by":1},{"id":13,"uuid":"c1182034-3583-4a59-b7d1-ed22f612a91a","title":"塞翁失马","slug":"sai-weng-shi-ma","markdown":"<center>A Setback May Be a Blessing in Disguise</center>\n\nA farmer had only one horse. One day, his horse ran away.\n\nHis neighbors said, “I'm so sorry. This is such bad news. You must be so upset.”\n\nThe man just said, “We'll see.”\n\nA few days later, his horse came back with twenty wild horses following. The man and his son corralled all 21 horses.\n\nHis neighbors said, “Congratulations! This is such good news. You must be so happy!”\n\nThe man just said, “We'll see.”\n\nOne of the wild horses kicked the man's only son, breaking both his legs.\n\nHis neighbors said, “I'm so sorry. This is such bad news. You must be so upset.”\n\nThe man just said, “We'll see.”\n\nThe country went to war, and every able-bodied young man was drafted to fight. The war was terrible and killed every young man, but the farmer's son was spared, since his broken legs prevented him from being drafted.\n\nHis neighbors said, “Congratulations! This is such good news. You must be so happy!”\n\nThe man just said, “We'll see.”","html":"<p><center>A Setback May Be a Blessing in Disguise</center></p>\n\n<p>A farmer had only one horse. One day, his horse ran away.</p>\n\n<p>His neighbors said, “I'm so sorry. This is such bad news. You must be so upset.”</p>\n\n<p>The man just said, “We'll see.”</p>\n\n<p>A few days later, his horse came back with twenty wild horses following. The man and his son corralled all 21 horses.</p>\n\n<p>His neighbors said, “Congratulations! This is such good news. You must be so happy!”</p>\n\n<p>The man just said, “We'll see.”</p>\n\n<p>One of the wild horses kicked the man's only son, breaking both his legs.</p>\n\n<p>His neighbors said, “I'm so sorry. This is such bad news. You must be so upset.”</p>\n\n<p>The man just said, “We'll see.”</p>\n\n<p>The country went to war, and every able-bodied young man was drafted to fight. The war was terrible and killed every young man, but the farmer's son was spared, since his broken legs prevented him from being drafted.</p>\n\n<p>His neighbors said, “Congratulations! This is such good news. You must be so happy!”</p>\n\n<p>The man just said, “We'll see.”</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1465428196695,"created_by":1,"updated_at":1465428205667,"updated_by":1,"published_at":1465428205668,"published_by":1},{"id":14,"uuid":"901e41af-3097-4bb8-b5ed-0a61865654f0","title":"Better to Starve Free Than Be a Fat Slave","slug":"better-to-starve-free-than-be-a-fat-slave","markdown":"\nA gaunt Wolf was almost dead with hunger when he happened to meet a House-dog who was passing by.\n\n\"Ah, Cousin,\" said the Dog.\n\"I knew how it would be; your irregular life will soon be the ruin of you. Why do you not work steadily as I do, and get your food regularly given to you?\"\n\n\"I would have no objection,\" said the Wolf, \"if I could only get a place.\"\n\n\"I will easily arrange that for you,\" said the Dog; \"come with me to my master and you shall share my work.\"\n\nSo the Wolf and the Dog went towards the town together. On the way there the Wolf noticed that the hair on a certain part of the Dog's neck was very much worn away, so he asked him how that had come about.\n\n\"Oh, it is nothing,\" said the Dog. \"That is only the place where the collar is put on at night to keep me chained up; it chafes a bit, but one soon gets used to it.\"\n\n\"Is that all?\" said the Wolf.   \"Then good-bye to you, Master Dog.\"","html":"<p>A gaunt Wolf was almost dead with hunger when he happened to meet a House-dog who was passing by.</p>\n\n<p>\"Ah, Cousin,\" said the Dog. <br />\n\"I knew how it would be; your irregular life will soon be the ruin of you. Why do you not work steadily as I do, and get your food regularly given to you?\"</p>\n\n<p>\"I would have no objection,\" said the Wolf, \"if I could only get a place.\"</p>\n\n<p>\"I will easily arrange that for you,\" said the Dog; \"come with me to my master and you shall share my work.\"</p>\n\n<p>So the Wolf and the Dog went towards the town together. On the way there the Wolf noticed that the hair on a certain part of the Dog's neck was very much worn away, so he asked him how that had come about.</p>\n\n<p>\"Oh, it is nothing,\" said the Dog. \"That is only the place where the collar is put on at night to keep me chained up; it chafes a bit, but one soon gets used to it.\"</p>\n\n<p>\"Is that all?\" said the Wolf.   \"Then good-bye to you, Master Dog.\"</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1465428251854,"created_by":1,"updated_at":1465580347991,"updated_by":1,"published_at":1465580347992,"published_by":1},{"id":15,"uuid":"fbfa810d-5131-4a61-be1a-931969838dba","title":"The Two Frogs","slug":"the-two-frogs","markdown":"Two frogs dwelt in the same pool. The pool being dried up under the summer's heat, they left it and set out together for another home. As they went along they chanced to pass a deep well, amply supplied with water, on seeing which, one of the Frogs said to the other: \"Let us descend and make our abode in this well.\" The other replied with greater caution: \"But suppose the water should fail us, how can we get out again from so great a depth?\"\n\n\n","html":"<p>Two frogs dwelt in the same pool. The pool being dried up under the summer's heat, they left it and set out together for another home. As they went along they chanced to pass a deep well, amply supplied with water, on seeing which, one of the Frogs said to the other: \"Let us descend and make our abode in this well.\" The other replied with greater caution: \"But suppose the water should fail us, how can we get out again from so great a depth?\"</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1465428451707,"created_by":1,"updated_at":1466482026271,"updated_by":1,"published_at":1466482026272,"published_by":1},{"id":16,"uuid":"acaaadcb-df49-4fb3-9a51-44506de5d3a0","title":"Download, Plan, Solve, Respond.","slug":"download-plan-solve-respond","markdown":"Here's a great article on how your brain appears as viewed by an MRI when you solve a problem.\n\nhttp://mobile.nytimes.com/2016/07/29/science/brain-scans-math.html","html":"<p>Here's a great article on how your brain appears as viewed by an MRI when you solve a problem.</p>\n\n<p><a href='http://mobile.nytimes.com/2016/07/29/science/brain-scans-math.html'>http://mobile.nytimes.com/2016/07/29/science/brain-scans-math.html</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1471640442553,"created_by":1,"updated_at":1471640456327,"updated_by":1,"published_at":1471640451269,"published_by":1},{"id":17,"uuid":"f8b393fe-435c-4604-ab60-2225d144d3ef","title":"Aquatic Jambiance","slug":"aquatic-jambiance","markdown":"Here's a link to a new track entitled [Aquatic Jambiance](https://youtu.be/ASyPncXZ02Y) by one of my favorite artists, [Ronald Jenkees](http://www.ronaldjenkees.com/).\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ASyPncXZ02Y\" frameborder=\"0\" allowfullscreen></iframe>","html":"<p>Here's a link to a new track entitled <a href=\"https://youtu.be/ASyPncXZ02Y\">Aquatic Jambiance</a> by one of my favorite artists, <a href=\"http://www.ronaldjenkees.com/\">Ronald Jenkees</a>.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ASyPncXZ02Y\" frameborder=\"0\" allowfullscreen></iframe>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1472263153857,"created_by":1,"updated_at":1472263193889,"updated_by":1,"published_at":1472263193889,"published_by":1},{"id":18,"uuid":"016f0810-c836-40e5-b18f-98fe1e438475","title":"Company Culture","slug":"remote-workers","markdown":"[\"What really matters in company culture is openness, communication, honesty, and a lack of ego. Remote culture, while it can’t give you a 5:00 beer-flight happy hour, can give you what counts the most thanks to the essence of such work, which is rooted in tireless communication and clarity. I’d like to see Careers pages change to include company perks such as constant clarity, celebrated productivity, and freedom to work from where you’re most comfortable—forget the nerf guns.\"](https://medium.com/@margotcodes/going-remote-why-remote-work-should-change-the-future-of-startup-culture-4803bc5a6bef#.g6s39nasu)","html":"<p><a href=\"https://medium.com/@margotcodes/going-remote-why-remote-work-should-change-the-future-of-startup-culture-4803bc5a6bef#.g6s39nasu\">\"What really matters in company culture is openness, communication, honesty, and a lack of ego. Remote culture, while it can’t give you a 5:00 beer-flight happy hour, can give you what counts the most thanks to the essence of such work, which is rooted in tireless communication and clarity. I’d like to see Careers pages change to include company perks such as constant clarity, celebrated productivity, and freedom to work from where you’re most comfortable—forget the nerf guns.\"</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1473187250985,"created_by":1,"updated_at":1473187269541,"updated_by":1,"published_at":1473187269542,"published_by":1},{"id":19,"uuid":"4d124f40-0f2a-4eb9-8208-978cb28fff79","title":"What Makes a Game Great? And also, Why Mike Madden Has Poor Choice in Video Games.","slug":"why-overwatch-is-one-of-the-best-games-ever-and-mike-madden-has-poor-choice-in-video-games","markdown":"**tl;dr**: we are Groot.\n\nReleased in May 2016, [Overwatch](http://www.ign.com/games/overwatch/pc-20027413) has captured the attention of casual and competetive gamers alike. I'm writing this blog post because I wanted to take a moment to ramble about why Overwatch has already had success. In other words, I want to throw my shitty opinion out on the internet like everyone else. But mostly because I want to talk about why my cousin, [Mike Madden](https://twitter.com/m1kemadden), is a complete imbecile.\n\nLet's dissect the first statement: Overwatch's immediate success. There's a few things going on here. First and foremost, Overwatch is a creation of Blizzard. But more specifically, [Chris Metzen](https://en.wikipedia.org/wiki/Chris_Metzen) and [Jeff Kaplan](https://en.wikipedia.org/wiki/Jeffrey_Kaplan_(game_designer)). Like Blizzard, these guys have a track record for creating beautifully well balanced games. As we know, [Overwatch](https://en.wikipedia.org/wiki/Overwatch_(video_game)) is a first person shooter. But, what separates it from your typical FPS? In my opinion, the [Roles](https://en.wikipedia.org/wiki/Overwatch_\\(video_game\\)#Roles) each character plays plus the differences in the skills and attributes of each deliver an awesome platform where only balanced teams thrive. Historically, Blizzard has always succeeded in producing high balanced games such as the Starcraft and Diablo franchises.\n\nBalance is incredibly important in a game for many reasons, but namely so that no single character, item, role, or attribute is too powerful. In short, if a game is unbalanced then it can ruin the overall experience of a game for any individual player. Ideally, in a balanced game the qualities that separate player success is actually their strategy, and skill in the game. If a game is unbalanced, it may favor one particular character or skill and thus the game loses appeal overall due to what is commonly referred to as \"pwnage\". The result is a game where the overall experience of playing it becomes less and less appealing.\n\nA good example of a game losing appeal due to an unbalanced environment would be Tom Clancy's: The Division. As we know, The Division was hacked and allows for cheats to be put in play. Since there is a very accessible way to cheat, the very nature of the game has been destroyed thereby creating an unbalanced environment. This is why it's really a tragedy when games are compromised; they lose their playability. I could elaborate on this topic for quite a while and bore you. I've only alluded to it for any readers who are unversed in what I believe is the necessary harmony within a game to propel it towards excellence such as my cousin, Mike Madden, who is a child who wanders into the middle of a movie; he has no frame of reference.\n\nBut what really makes Overwatch different? It's no secret that Overwatch is a team game. The teams that succeed seem to be the ones which have the correct roles filled to achieve equilibrium with respect to team dynamics. In my opinion, the optimally successful team in Overwatch will be the one whos strategy is to attempt to operate as a [Nash Equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium): \n\n> In game theory, the Nash equilibrium is a solution concept of a non-cooperative game involving two or more players in which each player is assumed to know the equilibrium strategies of the other players, and no player has anything to gain by changing only his or her own strategy. If each player has chosen a strategy and no player can benefit by changing strategies while the other players keep theirs unchanged, then the current set of strategy choices and the corresponding payoffs constitutes a Nash equilibrium.\n\nOverwatch attempts to push teams to operate in this fashion. In the character selection screen, teams are literally warned about \"not having a healer\" or \"not enough offensive players\". In my opinion, this is Overwatch attempting to get players to work towards operating as a Nash Equilibrium.\n\nSo what does this mean in Layman's terms? In my very unprofessional and sloppy opinion, each member of an Overwatch team should behave according to the strengths of their chosen character. Keep in mind the other character types on your team and the objective at hand. In other words, to achieve a Nash Equilibrium within Overwatch, formulate a strategy for each team member on your team before the match beings. Once your strategy is formalized, stick to it. Thus far, what has struck me about the teams that are victorious is that they appear to have these type of dynamics from a bird's eye view. In other words, their strategy is closer to being a Nash Equilibrium than the opposing team.\n\nIn my really unprofessional opinion, if a game is modelled after mathematical models such as Nash's Equilibrium that will ultimately determine the \"fun\"ness of a game, as we see in Overwatch. There seem to be endless combinations of characters to create an awesome team and more importantly a really fun experience.","html":"<p><strong>tl;dr</strong>: we are Groot.</p>\n\n<p>Released in May 2016, <a href=\"http://www.ign.com/games/overwatch/pc-20027413\">Overwatch</a> has captured the attention of casual and competetive gamers alike. I'm writing this blog post because I wanted to take a moment to ramble about why Overwatch has already had success. In other words, I want to throw my shitty opinion out on the internet like everyone else. But mostly because I want to talk about why my cousin, <a href=\"https://twitter.com/m1kemadden\">Mike Madden</a>, is a complete imbecile.</p>\n\n<p>Let's dissect the first statement: Overwatch's immediate success. There's a few things going on here. First and foremost, Overwatch is a creation of Blizzard. But more specifically, <a href=\"https://en.wikipedia.org/wiki/Chris_Metzen\">Chris Metzen</a> and <a href=\"https://en.wikipedia.org/wiki/Jeffrey_Kaplan_(game_designer)\">Jeff Kaplan</a>. Like Blizzard, these guys have a track record for creating beautifully well balanced games. As we know, <a href=\"https://en.wikipedia.org/wiki/Overwatch_(video_game)\">Overwatch</a> is a first person shooter. But, what separates it from your typical FPS? In my opinion, the <a href=\"https://en.wikipedia.org/wiki/Overwatch_(video_game)#Roles\">Roles</a> each character plays plus the differences in the skills and attributes of each deliver an awesome platform where only balanced teams thrive. Historically, Blizzard has always succeeded in producing high balanced games such as the Starcraft and Diablo franchises.</p>\n\n<p>Balance is incredibly important in a game for many reasons, but namely so that no single character, item, role, or attribute is too powerful. In short, if a game is unbalanced then it can ruin the overall experience of a game for any individual player. Ideally, in a balanced game the qualities that separate player success is actually their strategy, and skill in the game. If a game is unbalanced, it may favor one particular character or skill and thus the game loses appeal overall due to what is commonly referred to as \"pwnage\". The result is a game where the overall experience of playing it becomes less and less appealing.</p>\n\n<p>A good example of a game losing appeal due to an unbalanced environment would be Tom Clancy's: The Division. As we know, The Division was hacked and allows for cheats to be put in play. Since there is a very accessible way to cheat, the very nature of the game has been destroyed thereby creating an unbalanced environment. This is why it's really a tragedy when games are compromised; they lose their playability. I could elaborate on this topic for quite a while and bore you. I've only alluded to it for any readers who are unversed in what I believe is the necessary harmony within a game to propel it towards excellence such as my cousin, Mike Madden, who is a child who wanders into the middle of a movie; he has no frame of reference.</p>\n\n<p>But what really makes Overwatch different? It's no secret that Overwatch is a team game. The teams that succeed seem to be the ones which have the correct roles filled to achieve equilibrium with respect to team dynamics. In my opinion, the optimally successful team in Overwatch will be the one whos strategy is to attempt to operate as a <a href=\"https://en.wikipedia.org/wiki/Nash_equilibrium\">Nash Equilibrium</a>: </p>\n\n<blockquote>\n  <p>In game theory, the Nash equilibrium is a solution concept of a non-cooperative game involving two or more players in which each player is assumed to know the equilibrium strategies of the other players, and no player has anything to gain by changing only his or her own strategy. If each player has chosen a strategy and no player can benefit by changing strategies while the other players keep theirs unchanged, then the current set of strategy choices and the corresponding payoffs constitutes a Nash equilibrium.</p>\n</blockquote>\n\n<p>Overwatch attempts to push teams to operate in this fashion. In the character selection screen, teams are literally warned about \"not having a healer\" or \"not enough offensive players\". In my opinion, this is Overwatch attempting to get players to work towards operating as a Nash Equilibrium.</p>\n\n<p>So what does this mean in Layman's terms? In my very unprofessional and sloppy opinion, each member of an Overwatch team should behave according to the strengths of their chosen character. Keep in mind the other character types on your team and the objective at hand. In other words, to achieve a Nash Equilibrium within Overwatch, formulate a strategy for each team member on your team before the match beings. Once your strategy is formalized, stick to it. Thus far, what has struck me about the teams that are victorious is that they appear to have these type of dynamics from a bird's eye view. In other words, their strategy is closer to being a Nash Equilibrium than the opposing team.</p>\n\n<p>In my really unprofessional opinion, if a game is modelled after mathematical models such as Nash's Equilibrium that will ultimately determine the \"fun\"ness of a game, as we see in Overwatch. There seem to be endless combinations of characters to create an awesome team and more importantly a really fun experience.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1473200263028,"created_by":1,"updated_at":1473298732506,"updated_by":1,"published_at":1473298540206,"published_by":1}],"users":[{"id":1,"uuid":"30cbf41a-e70e-4a38-9421-6feb927ab638","name":"Rob Madden","slug":"robmadden","password":"$2a$10$WRuxUDz97S7uMgOXT7fYLupmPlyWVmMZpT4dKQ3DpbP62BPMNX8Iu","email":"madden.rob@gmail.com","image":"/content/images/2016/Aug/13631571_10157146277330603_5527915452114064116_n.jpg","cover":null,"bio":"Download, Plan, Solve, Respond.","website":"","location":"Dagobah System","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":1473187215687,"created_at":1412695729600,"created_by":1,"updated_at":1473298678612,"updated_by":1}],"roles":[{"id":1,"uuid":"b9b89fc9-3e55-48aa-8000-f88ecc8dc178","name":"Administrator","description":"Administrators","created_at":1412695722189,"created_by":1,"updated_at":1412695722189,"updated_by":1},{"id":2,"uuid":"daa1bcd4-be05-4727-b83b-c5f3955373a0","name":"Editor","description":"Editors","created_at":1412695722189,"created_by":1,"updated_at":1412695722189,"updated_by":1},{"id":3,"uuid":"96cb9a6d-cea0-4d9d-ac02-328746bee2a1","name":"Author","description":"Authors","created_at":1412695722191,"created_by":1,"updated_at":1412695722191,"updated_by":1},{"id":4,"uuid":"ceef53ef-adf4-45be-b46f-04210617629a","name":"Owner","description":"Blog Owner","created_at":1412695722191,"created_by":1,"updated_at":1412695722191,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":1,"uuid":"cd63cafa-109e-43bd-9b94-10e14023b358","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1412695722781,"created_by":1,"updated_at":1412695722781,"updated_by":1},{"id":2,"uuid":"c2517be6-ccc6-4e67-8e2d-f29753373a0f","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1412695722827,"created_by":1,"updated_at":1412695722827,"updated_by":1},{"id":3,"uuid":"1cce53d8-038d-486e-a8fe-e3ff62e0f262","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1412695722873,"created_by":1,"updated_at":1412695722873,"updated_by":1},{"id":4,"uuid":"cd8bbf39-0ffa-4082-b85c-c55c40315d69","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1412695722920,"created_by":1,"updated_at":1412695722920,"updated_by":1},{"id":5,"uuid":"2f6d4644-a9ec-44db-a009-9200b9420114","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1412695722968,"created_by":1,"updated_at":1412695722968,"updated_by":1},{"id":6,"uuid":"8b9baa78-867c-4944-b985-55c354cb6f71","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1412695723008,"created_by":1,"updated_at":1412695723008,"updated_by":1},{"id":7,"uuid":"8799b50b-a3d5-4a2c-b4f5-9d47fe577fdc","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1412695723052,"created_by":1,"updated_at":1412695723052,"updated_by":1},{"id":8,"uuid":"a3c827ba-edc0-4d97-be11-6257b95b2c75","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1412695723096,"created_by":1,"updated_at":1412695723096,"updated_by":1},{"id":9,"uuid":"1d1c62fa-12c5-4b89-b916-b6115944beab","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1412695723137,"created_by":1,"updated_at":1412695723137,"updated_by":1},{"id":10,"uuid":"e2893cd1-2fd0-4255-9322-b0c65d32b34a","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1412695723180,"created_by":1,"updated_at":1412695723180,"updated_by":1},{"id":11,"uuid":"497051ea-ce4a-42ae-a7f6-f578e4a78153","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1412695723220,"created_by":1,"updated_at":1412695723220,"updated_by":1},{"id":12,"uuid":"5407ac3c-a037-46a6-8526-52b749ac9edf","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1412695723267,"created_by":1,"updated_at":1412695723267,"updated_by":1},{"id":13,"uuid":"ad8b1ca9-6f97-4de9-8752-2b9d30b4fd35","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1412695723323,"created_by":1,"updated_at":1412695723323,"updated_by":1},{"id":14,"uuid":"e7c40b25-e9a1-42b4-9a14-8faf71650c8a","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1412695723481,"created_by":1,"updated_at":1412695723481,"updated_by":1},{"id":15,"uuid":"c3aa7454-ef9e-4829-836c-74892875de9e","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1412695723520,"created_by":1,"updated_at":1412695723520,"updated_by":1},{"id":16,"uuid":"b184eff2-6dcd-4bab-b996-6d40d74b1fbf","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1412695723567,"created_by":1,"updated_at":1412695723567,"updated_by":1},{"id":17,"uuid":"79dc6846-5618-44e6-87ef-f75e9efa93bf","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1412695723610,"created_by":1,"updated_at":1412695723610,"updated_by":1},{"id":18,"uuid":"89483619-7eba-413e-9e11-a8d7e080cfa2","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1412695723647,"created_by":1,"updated_at":1412695723647,"updated_by":1},{"id":19,"uuid":"b21dfdbb-581c-47c5-b114-62ff1801da15","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1412695723681,"created_by":1,"updated_at":1412695723681,"updated_by":1},{"id":20,"uuid":"0c470660-45c3-493f-b893-8efcdc719c5f","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1412695723721,"created_by":1,"updated_at":1412695723721,"updated_by":1},{"id":21,"uuid":"17e00330-892d-4dd4-92e1-2d1713b9f83b","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1412695723771,"created_by":1,"updated_at":1412695723771,"updated_by":1},{"id":22,"uuid":"054d55a9-9dbf-43ba-a125-9b10e1338d13","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1412695723802,"created_by":1,"updated_at":1412695723802,"updated_by":1},{"id":23,"uuid":"a6e33397-89a9-4610-8f8b-49ae59afae15","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1412695723976,"created_by":1,"updated_at":1412695723976,"updated_by":1},{"id":24,"uuid":"882a4979-22a7-4c86-8d0f-9aec97c8dc16","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1412695724122,"created_by":1,"updated_at":1412695724122,"updated_by":1},{"id":25,"uuid":"5880950c-947e-4d7d-a2f1-091f0387c949","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1412695724165,"created_by":1,"updated_at":1412695724165,"updated_by":1},{"id":26,"uuid":"c00ea098-18e4-4aa6-bae0-fa99117efc87","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1412695724209,"created_by":1,"updated_at":1412695724209,"updated_by":1},{"id":27,"uuid":"1e40d783-463b-4d58-91fc-01f8f9b598ea","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1412695724329,"created_by":1,"updated_at":1412695724329,"updated_by":1},{"id":28,"uuid":"94d04024-7de3-4d90-afa0-d25fe4176870","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1412695724356,"created_by":1,"updated_at":1412695724356,"updated_by":1},{"id":29,"uuid":"c3f9c6dc-7cec-4d05-b886-fa8037e3ed8b","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1412695724587,"created_by":1,"updated_at":1412695724587,"updated_by":1},{"id":30,"uuid":"0b6b035a-4e5b-46c7-996e-564c54ad10d7","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1412695724623,"created_by":1,"updated_at":1412695724623,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30}],"permissions_apps":[],"settings":[{"id":1,"uuid":"d64f5f22-872f-40ad-a4a6-79323767faee","key":"databaseVersion","value":"003","type":"core","created_at":1412695730734,"created_by":1,"updated_at":1412695730734,"updated_by":1},{"id":2,"uuid":"9fb3453b-66ea-426e-96d9-c1726b3df64c","key":"dbHash","value":"1165e6e0-adf8-41b2-9260-535783317fe2","type":"core","created_at":1412695730794,"created_by":1,"updated_at":1412695730794,"updated_by":1},{"id":3,"uuid":"c25d7778-068f-49b9-ab1f-fd12c43acd8f","key":"nextUpdateCheck","value":"1473382091","type":"core","created_at":1412695730795,"created_by":1,"updated_at":1473295690911,"updated_by":1},{"id":4,"uuid":"ba1dd976-23b4-4902-97a1-b04a8a634f5d","key":"displayUpdateNotification","value":"0.10.1","type":"core","created_at":1412695730797,"created_by":1,"updated_at":1473295690917,"updated_by":1},{"id":5,"uuid":"bbb66649-8ce0-4b53-a63c-20601cdc844f","key":"title","value":"","type":"blog","created_at":1412695730797,"created_by":1,"updated_at":1472263551803,"updated_by":1},{"id":6,"uuid":"c234bda8-7d42-4b15-8129-d51b452bfb30","key":"description","value":"","type":"blog","created_at":1412695730797,"created_by":1,"updated_at":1472263551805,"updated_by":1},{"id":7,"uuid":"7635f186-86d3-495c-bce0-6d83ffc11002","key":"email","value":"madden.rob@gmail.com","type":"blog","created_at":1412695730798,"created_by":1,"updated_at":1472263551806,"updated_by":1},{"id":8,"uuid":"ba95c576-fd8c-46af-9a62-34cd0e66744f","key":"logo","value":"","type":"blog","created_at":1412695730798,"created_by":1,"updated_at":1472263551807,"updated_by":1},{"id":9,"uuid":"f9fd81e4-99f0-419c-be5c-26918b7766b0","key":"cover","value":"/content/images/2016/Aug/groot.png","type":"blog","created_at":1412695730798,"created_by":1,"updated_at":1472263551808,"updated_by":1},{"id":10,"uuid":"2efce900-c330-42f5-a7f6-217e048e5180","key":"defaultLang","value":"en_US","type":"blog","created_at":1412695730798,"created_by":1,"updated_at":1472263551809,"updated_by":1},{"id":11,"uuid":"78462af3-01f9-4206-8dbf-789cb989773c","key":"postsPerPage","value":"5","type":"blog","created_at":1412695730798,"created_by":1,"updated_at":1472263551810,"updated_by":1},{"id":12,"uuid":"16119e17-b47d-45b1-b023-9db006443e38","key":"forceI18n","value":"true","type":"blog","created_at":1412695730798,"created_by":1,"updated_at":1472263551811,"updated_by":1},{"id":13,"uuid":"75d0bd8d-36d9-417a-8095-dd6069e00f13","key":"permalinks","value":"/:year/:month/:day/:slug/","type":"blog","created_at":1412695730799,"created_by":1,"updated_at":1472263551812,"updated_by":1},{"id":14,"uuid":"9349cbe2-2fca-4895-b4b7-91816ecc810c","key":"activeTheme","value":"mega","type":"theme","created_at":1412695730801,"created_by":1,"updated_at":1472263551813,"updated_by":1},{"id":15,"uuid":"00419193-78b5-4538-9278-0d7e6ba431fa","key":"activeApps","value":"[]","type":"app","created_at":1412695730801,"created_by":1,"updated_at":1412696109178,"updated_by":1},{"id":16,"uuid":"b52f8d11-6631-4524-94d8-b17bb51fc1f9","key":"installedApps","value":"[]","type":"app","created_at":"2014-10-07 15:28:50","created_by":1,"updated_at":"2016-09-08 02:12:10","updated_by":1},{"id":17,"uuid":"0706bfe9-6d98-41b7-b8f8-bd64b849339a","key":"seenNotifications","value":"[]","type":"core","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1},{"id":18,"uuid":"e4a45923-5741-4565-95f4-da88e3b0e8da","key":"migrations","value":"{}","type":"core","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1},{"id":19,"uuid":"78e06be7-a69f-4141-bca4-bfdf73180615","key":"activeTimezone","value":"Etc/UTC","type":"blog","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1},{"id":20,"uuid":"797145e0-bf18-4911-a08c-696943ec9011","key":"ghost_head","value":"","type":"blog","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1},{"id":21,"uuid":"1b5ffb5e-f2ed-40b6-bf8f-e89219d6ac6a","key":"ghost_foot","value":"","type":"blog","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1},{"id":22,"uuid":"f89b7109-e6fb-44e7-8e5e-6536f26dc589","key":"facebook","value":"","type":"blog","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1},{"id":23,"uuid":"c9b279ca-5aa3-4245-8230-091ae25dfd8a","key":"twitter","value":"","type":"blog","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1},{"id":24,"uuid":"5fcb7088-11cd-441a-b1d6-6e21d439b2be","key":"labs","value":"{}","type":"blog","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1},{"id":25,"uuid":"94f6d5b5-55e0-4b01-953f-ddb0d228d678","key":"navigation","value":"[{\"label\":\"Home\", \"url\":\"/\"}]","type":"blog","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1},{"id":26,"uuid":"b0d79747-56ec-4e09-8beb-a56490d8dc39","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1},{"id":27,"uuid":"63edc984-aa70-46c2-856f-10c7bf6c2b20","key":"isPrivate","value":"false","type":"private","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1},{"id":28,"uuid":"fab7e8c6-0fa9-4b31-8808-8fba258b7c85","key":"password","value":"","type":"private","created_at":"2016-09-08 02:12:09","created_by":1,"updated_at":"2016-09-08 02:12:09","updated_by":1}],"tags":[{"id":1,"uuid":"c88b55ff-e7b3-4f0b-810e-fbdb72d16952","name":"Getting Started","slug":"getting-started","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1412695722188,"created_by":1,"updated_at":1412695722188,"updated_by":1},{"id":2,"uuid":"8ce8b07b-5e38-47a1-b49f-576169c06ace","name":"android","slug":"android","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1413212308368,"created_by":1,"updated_at":1413212308368,"updated_by":1},{"id":3,"uuid":"319d179b-0f36-4578-9722-b0c1ade7cd20","name":"emulator","slug":"emulator","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1413212308368,"created_by":1,"updated_at":1413212308368,"updated_by":1},{"id":4,"uuid":"4d2311f4-800a-4ac5-88f8-b1b153c65be6","name":" /etc/hosts","slug":"etchosts","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1413212308369,"created_by":1,"updated_at":1413212308369,"updated_by":1},{"id":5,"uuid":"d18fd653-ae4b-4604-93ab-529f46fbfdd5","name":" genymotion","slug":"genymotion","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1413212308369,"created_by":1,"updated_at":1413212308369,"updated_by":1},{"id":6,"uuid":"0d00d5ca-d2a1-4815-9a4e-2699b824c474","name":"/system/etc/hosts","slug":"systemetchosts","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1413212452465,"created_by":1,"updated_at":1413212452465,"updated_by":1},{"id":7,"uuid":"81a79064-2f21-4ce1-bfba-a38ef0363253","name":"hosts","slug":"hosts","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1413212452466,"created_by":1,"updated_at":1413212452466,"updated_by":1},{"id":8,"uuid":"a4e50031-9209-404e-87a6-75f19bb7f568","name":"git","slug":"git","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1452646169706,"created_by":1,"updated_at":1452646169706,"updated_by":1}],"posts_tags":[{"id":26,"post_id":8,"tag_id":2},{"id":27,"post_id":8,"tag_id":3},{"id":28,"post_id":8,"tag_id":4},{"id":29,"post_id":8,"tag_id":5},{"id":30,"post_id":8,"tag_id":6},{"id":31,"post_id":8,"tag_id":7},{"id":38,"post_id":11,"tag_id":8}],"apps":[],"app_settings":[],"app_fields":[]}}